fr = '/home/stephen/academy/data/smelly/outputs.csv'
ft = '/home/stephen/academy/data/smelly/words.txt'
fw = '/home/stephen/academy/data/smelly/scores.txt'

import spacy
import re
import io

dep = spacy.load('en')

def reader(f):
#    ftr = open(f,'r').readlines()
    ftr = io.open(f,'r',encoding='utf-8').readlines()
    data = []
    for line in ftr:
        if line[0] == '"':
            data.append([line.split('",')[0][1:]] + line.split('",')[1].split(","))
        else:
            data.append(line.split(","))
    for n in range(len(data)):
        if data[n][1] == "":
            data[n][1] == "0"
        elif data[n][1] != "0":
#            print "SMELL"
            data[n][1] = "1"
    return data

def checker(data):
    for line in data:
#        print line
        if line[1] == "":
            print line[0]

def assesser(data,ftw,thr):
    tests = [x.split("::") for x in open(ft,'r').readlines()]
    sults = [x[:2] for x in data]
    thing = [[x[0]+"one",x[0]+"two",x[0]+"r-one",x[0]+"r-two",x[0]+"dep"] for x in tests]
    zing = [x for y in thing for x in y]
#    print "ZING LEN",len(zing)
    sults[0] = sults[0] + zing
    ftw.write(":::".join(sults[0]) + "\n")
    for n in range(1,len(sults)):
        print n
        comp = re.sub("[:;,\"\*\[\]\(\)#}{\.]","",sults[n][0])
        comp = re.sub("( \')|(\' )"," ",comp)
        comp = re.sub("( -)|(- )"," ",comp)
        coms = comp.lower().split()
#        simp = len([x for x in coms if x in words])
        parse = dep(unicode(comp))
        put = []
        for item in tests:
#            print "ITEM",item
#            words = set([x.lemma_ for x in dep(unicode(item[1].decode('utf-8')))])
            words = [unicode(x.decode('utf-8')) for x in item[1].split(",")]
            simp = len([x for x in coms if x in words])
            par = 0
            for word in parse:
                if word.lemma_.lower() in words:
                    for child in [x for x in word.children]:
                        if child.lemma_.lower() in words:
                            par = 1
#            put.extend([str(int(simp>0)),str(int(simp>1)),str(int(par==1))])
            put.extend([str(int(simp>0)),str(int(simp>1)),str(int(float(simp)/len(parse)>=thr)),str(int(float(simp)/len(parse)>=2*thr)),str(int(par==1))])
#        print "PUT LEN",len(put)
        ftw.write(":::".join([x.encode('utf-8') for x in sults[n]] + put ) + "\n")
#            ftw.write(":::".join(sults[n].extend([str(simp>0),str(simp>1),str(par==1)])).encode('utf-8'))
    return sults

def writer(sults,ftw):
    ftw.write("\n".join([":::".join(x) for x in sults]))

data = reader(fr)
#checker(data)
ftw = open(fw,'w')
sults = assesser(data,ftw,0.05)
#ftw = open(fw,'w')
#writer(sults,ftw)

